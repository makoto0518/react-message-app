{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\awake\\\\myapp\\\\No.2\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// Reactを使うために必要な記述。useStateとuseEffectはReactの便利な機能（フック）を使うために読み込んでいる。\n\n//Reactの「アプリ本体」を定義する関数。この中にUIやロジックを書く。\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(''); //入力中のテキストを保存する変数。初期値は空文字（''）。\n  const [messages, setMessages] = useState([]); //サーバーから取得した全メッセージを入れる配列。初期値は空の配列（[]）。\n\n  // useEffect: 初回読み込み時にサーバーからデータを受け取る\n  useEffect(() => {\n    //ページ読み込み時に一度だけ実行する処理を定義する（副作用処理）\n    fetch('/api/messages') //サーバー（Express）の /api/messages へGETリクエストを送る\n    .then(res => res.json()) //サーバーからの応答をJSON形式に変換\n    .then(data => setMessages(data)); //変換したデータを messages に保存（画面に表示される）\n  }, []); //サーバーから取得した全メッセージを入れる配列。初期値は空の配列（[]）。\n\n  // handleSubmit:送信ボタンが押されたときの処理\n  const handleSubmit = e => {\n    //送信ボタンが押されたときの関数を定義\n    e.preventDefault(); //フォームの「ページ更新」を止める（Reactでは手動で処理）\n    fetch('/api/messages', {\n      //ExpressにPOSTリクエストを送る \n      method: 'POST',\n      //メソッドや送信データの形式（JSON）を指定している\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        messages\n      }) //入力された文字をJSONとして送る\n    }).then(res => res.json()) //サーバーの返事を受け取り、messages に追加し、入力欄をリセット\n    .then(data => {\n      setMessages([...messages, data]);\n      setMessage('');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6295\\u7A3F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        //ユーザーが入力するテキスト欄。valueとonChangeで入力を管理\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u9001\\u4FE1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [msg.message, \":\", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"WDgp24k/FdZO6Mwa4GS0i45C6ek=\");\n_c = App;\nexport default App;\n// このコンポーネントを他で使えるようにする（index.jsが使ってる)\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","message","setMessage","messages","setMessages","fetch","then","res","json","data","handleSubmit","e","preventDefault","method","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","map","msg","index","content","_c","$RefreshReg$"],"sources":["C:/Users/awake/myapp/No.2/client/src/App.js"],"sourcesContent":["import React,{ useState, useEffect } from \"react\"; \r\n// Reactを使うために必要な記述。useStateとuseEffectはReactの便利な機能（フック）を使うために読み込んでいる。\r\n\r\n//Reactの「アプリ本体」を定義する関数。この中にUIやロジックを書く。\r\nfunction App() {\r\n    const [message, setMessage] = useState(''); //入力中のテキストを保存する変数。初期値は空文字（''）。\r\n    const [messages, setMessages] = useState([]);  //サーバーから取得した全メッセージを入れる配列。初期値は空の配列（[]）。\r\n\r\n    // useEffect: 初回読み込み時にサーバーからデータを受け取る\r\n    useEffect(() => { //ページ読み込み時に一度だけ実行する処理を定義する（副作用処理）\r\n        fetch('/api/messages') //サーバー（Express）の /api/messages へGETリクエストを送る\r\n        .then(res => res.json()) //サーバーからの応答をJSON形式に変換\r\n        .then(data => setMessages(data)); //変換したデータを messages に保存（画面に表示される）\r\n    }, []); //サーバーから取得した全メッセージを入れる配列。初期値は空の配列（[]）。\r\n\r\n    // handleSubmit:送信ボタンが押されたときの処理\r\n    const handleSubmit = (e) => { //送信ボタンが押されたときの関数を定義\r\n        e.preventDefault(); //フォームの「ページ更新」を止める（Reactでは手動で処理）\r\n        fetch('/api/messages', { //ExpressにPOSTリクエストを送る \r\n            method: 'POST',      //メソッドや送信データの形式（JSON）を指定している\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ messages }) //入力された文字をJSONとして送る\r\n        })\r\n        .then(res => res.json()) //サーバーの返事を受け取り、messages に追加し、入力欄をリセット\r\n        .then(data => {\r\n            setMessages([...messages, data]);\r\n            setMessage('');\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n          <h1>メッセージ投稿</h1>\r\n          <form onSubmit={handleSubmit}>\r\n            <input //ユーザーが入力するテキスト欄。valueとonChangeで入力を管理\r\n              type=\"text\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n            <button type=\"submit\">送信</button>\r\n          </form>\r\n    \r\n          <ul>\r\n          {/* messagesの中身を1つずつ取り出して画面に表示（繰り返し処理） */}\r\n            {messages.map((msg, index) => (\r\n              <li key={index}>\r\n                {msg.message}:{msg.content}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default App;\r\n// このコンポーネントを他で使えるようにする（index.jsが使ってる)"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjD;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAE/C;EACAC,SAAS,CAAC,MAAM;IAAE;IACdS,KAAK,CAAC,eAAe,CAAC,CAAC;IAAA,CACtBC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACxBF,IAAI,CAACG,IAAI,IAAIL,WAAW,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAAE;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpBP,KAAK,CAAC,eAAe,EAAE;MAAE;MACrBQ,MAAM,EAAE,MAAM;MAAO;MACrBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEd;MAAS,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CACDG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACxBF,IAAI,CAACG,IAAI,IAAI;MACVL,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEM,IAAI,CAAC,CAAC;MAChCP,UAAU,CAAC,EAAE,CAAC;IAClB,CAAC,CAAC;EACN,CAAC;EAED,oBACIJ,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBxB,OAAA;MAAMyB,QAAQ,EAAEb,YAAa;MAAAQ,QAAA,gBAC3BpB,OAAA;QAAO;QACL0B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAExB,OAAQ;QACfyB,QAAQ,EAAGf,CAAC,IAAKT,UAAU,CAACS,CAAC,CAACgB,MAAM,CAACF,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACFxB,OAAA;QAAQ0B,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eAEPxB,OAAA;MAAAoB,QAAA,EAEGf,QAAQ,CAACyB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBhC,OAAA;QAAAoB,QAAA,GACGW,GAAG,CAAC5B,OAAO,EAAC,GAAC,EAAC4B,GAAG,CAACE,OAAO;MAAA,GADnBD,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEd;AAACtB,EAAA,CAlDQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAoDZ,eAAeA,GAAG;AAClB;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}